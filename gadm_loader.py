# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GADMloader
                                 A QGIS plugin
 Download GADM data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-15
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Matthias Weigand
        email                : matthias.weigand@protonmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsVectorLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gadm_loader_dialog import GADMloaderDialog
import os.path
import re

from .utils.parser import parse_gadm_countries, get_url
from .utils.downloadThread import DownloadThread


class GADMloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GADMloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GADM Loader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.country_dict = parse_gadm_countries()
        self.dlg = GADMloaderDialog(self.country_dict)

    def read_inputs(self):
        self.format_gpkg = self.dlg.rbGeopackage.isChecked()
        self.country_name = self.dlg.cbCountry.currentText()
        self.country_code = self.country_dict[self.country_name]
        self.folder_name = self.dlg.qfFolder.filePath()

    def on_download_clicked(self):
        self.read_inputs()
        self.dlt = DownloadThread(get_url(self), self.folder_name)
        self.dlt.download_signal.connect(self.set_download_progress)
        self.dlt.start()


    def set_download_progress(self, value):
        self.dlg.pbDownload.setValue(value)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GADMloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gadm_loader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download GADM data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GADM Loader'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # show the dialog
        self.dlg.show()
        self.dlg.pbDownloadButton.clicked.connect(self.on_download_clicked)

        
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.read_inputs()

            # add layer(s) to canvas
            if self.dlg.cbAddLayers.isChecked():
                # set up regex to check files in self.folder_name.
                # it could be that there are other files, e.g. LICENSE.txt or prev. downloaded files
                regx = re.compile("gadm36_{c}{f}".format(
                    c = self.country_code,
                    f = ".gpkg$" if self.format_gpkg else "_[0-9]{1}.shp$"
                ))
                # loop over all files in self.folder_name and check whether they match the settings
                for f in os.listdir(self.folder_name):
                    if regx.match(f):
                        full_path = f'{self.folder_name}/{f}'
                        vlayer = QgsVectorLayer(full_path,
                                                os.path.splitext(os.path.basename(f))[0],
                                                "ogr")

                        # add layer if it is a shp
                        if not self.format_gpkg:
                            QgsProject.instance().addMapLayer(vlayer)

                        # add all sub-layers if it is a gpkg
                        # https://stackoverflow.com/a/57404611/3250126
                        else:
                            sublayers = vlayer.dataProvider().subLayers()

                            for sl in sublayers:
                                name = sl.split('!!::!!')[1]
                                uri = "%s|layername=%s" % (full_path, name,)
                                # Create layer
                                sub_vlayer = QgsVectorLayer(uri, name, 'ogr')
                                # Add layer to map
                                QgsProject.instance().addMapLayer(sub_vlayer)

